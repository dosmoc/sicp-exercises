(define (double x) (* x 2))

(define (halve x) (/ x 2))

(define (even? n)
  (= (remainder n 2) 0))

(define (m-iter a b)
  (define (mul-iter a b product)
    (newline)
    (display b)
    (cond  ((= b 0) product)
           ((even? b) (mul-iter (double a) (halve b) product))
           (else (mul-iter a (- b 1) (+ product a)))))
  (mul-iter a b 0))

(m-iter 0 1)
(m-iter 0 2)
(m-iter 0 3)
(m-iter 2 5)
(m-iter 3 0)
(m-iter 3 1)
(m-iter 3 2)
(m-iter 3 3)
(m-iter 3 4)
(m-iter 3 5)
(m-iter 3 6)
(m-iter 3 7)
(m-iter 3 300)
